{"name":"load","text":"load(callback: (state: State) => Promise<T[]>): void","returnType":"void","args":[{"name":"callback","type":"(state: State) => Promise<T[]>","text":"callback: (state: State) => Promise<T[]>"}],"ast":{"name":"load","kind":"Method","signatures":[{"return":{"type":{"text":"void","kind":"Intrinsic"}},"line":47,"parameters":[{"name":"callback","type":{"text":"(state: State) => Promise<T[]>","kind":"Function","return":{"text":"Promise<T[]>","kind":"Reference","source":{"line":1543,"path":"node_modules\\typescript\\lib\\lib.es5.d.ts"},"typeArguments":[{"text":"T[]","kind":"Array","elementType":{"text":"T","kind":"Reference","source":{"line":24,"path":"..\\datatables\\src\\lib\\src\\server\\TableHandler.svelte.ts"}}}]},"parameters":[{"name":"state","type":{"text":"State","kind":"Reference"},"line":47}]},"line":47}]}]},"markdown":"\n<p>Lazy load your data by running your fetch function according to some table state parameters.</p>\n<h2>Usage</h2>\n<p>The load method gives you access to the table state.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">table<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">myLoadFunction</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Row<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span></code></pre>\n<p>Your load function parses the state object to build an API request and must return a set of data.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">table<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> rowsPerPage<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> setRowsPerPage <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">https://myapi.com?limit=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>rowsPerPage<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;offset=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>offset<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></code></pre>\n"}