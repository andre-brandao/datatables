<script>
    import Comparators from './Comparators.svelte'
    import BasicMCF from './MCF_Basic.svelte'
    import AdvancedMCF from './MCF_Advanced.svelte'
    export let data
</script>


# Filtering

```svelte
<script>
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const filter = handler.createFilter('first_name')
    let value = ''
</script>

<input type="text" on:input={() => filter.set(value)}/>
```

# Comparators

A specific comparison function can apply to filters.

```svelte
<script>
    import { check } from '@vincjo/datatables'

    filter.set(42, check.isGreaterThanOrEqualTo)
    filter.set([25, 35], check.isStrictlyBetween)
</script>
```

### Available comparison functions in "`check`" object:

<Comparators/>

### Create your own comparison function

```svelte
<script lang="ts">
    const customCheck = (entry, value): boolean => {
        return entry != value
    }
    filter.set('john', customCheck)
</script>
```

# Multiple criteria filter

You may have descrete values in your datasets. The "`createAdvancedFilter`" method allows you to define multiple criteria for a single filter.

### Basic usage


```svelte
<script lang="ts">
    import { type DataHandler, check } from '@vincjo/datatables'
    export let handler: DataHandler

    const filter = handler.createAdvancedFilter('columnName', check.isEqualTo)
    const selected = filter.getSelected()
</script>

<button 
    on:click={() => filter.set('high')}
    class:active={$selected.includes('high')}
>High priority</button>

<button
    on:click={() => filter.set('low')}
    class:active={$selected.includes('low')}
>Low priority</button>
```

<BasicMCF/>


### Advanced usage

<AdvancedMCF {data}/>