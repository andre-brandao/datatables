
# Basic usage

## API request example

````bash
https://api.mysite.com/users?
    limit=10            # rows per page
    &offset=20          # offset (20 = page number 3)
    &q=michel           # full text search
    &city=limoge        # column filter: where "city" = 'limoge'
    &sort=age
    &order=desc         # order by "age" descending
````

## Bind a load function to datatable events
````svelte
<script lang="ts">
    import { DataHandler } from '@vincjo/datatables/remote'
    import { myLoadFunction } from './my-api-helper'

    const handler = new DataHandler([], { rowsPerPage: 10 })

    handler.onChange( (state: State) => myLoadFunction(state): Promise<Row[]> )
    // myLoadFunction() must return an iterable dataset
</script>

````

## State = client-side datatable state
````ts
type State = {
    currentPage: number,
    rowsPerPage: number,
    offset: number,
    search: string | undefined,
    sort: Sort<Row> | undefined,
    filters: Filter<Row>[] | undefined,
    setTotalRows: (value: number) => void
}
````

<!-- const qs = new URLSearchParams()

qs.set('limit', rowsPerPge      )
qs.set('sort' , sort.orderBy    )
qs.set('order', sort.direction  )
qs.set('skip' , offset          )

const url = `/api_endpoint?${qs}` -->

## Load function
````ts
import type { State } from '@vincjo/datatables/remote'

export const myLoadFunction = async (state: State) => {

    const response = await fetch(
        `https://api.mysite.com/users?${getParams(state)}`
    )
    const json = await response.json()

    state.setTotalRows(json.count)

    return json.results
}


const getParams = ({ offset, rowsPerPage, search, sort, filters }: State) => {

    let params = `offset=${offset}&limit=${rowsPerPage}`

    if (search) {
        params += `&q=${search}`
    }
    if (sort) {
        params += `&sort=${sort.orderBy}&order=${sort.direction}`
    }
    if (filters) {
        params += filters.map(({ filterBy, value }) => `&${filterBy}=${value}`).join()
    }
    return params
}
````

## Trigger reload
````ts
handler.invalidate() // will reload and update data
````

<style>
   h1{
        font-size:32px;
        color:var(--secondary);
        font-weight:normal;
    }
    h2{
        font-size:18px;
        color:var(--primary);
        font-weight:400;
        margin:80px 0 8px 0;
    }
    p{
        margin-right:24px;
    }
    blockquote{
        position:relative;
        overflow: auto;
        white-space: nowrap;
        display:inline-block;
        margin:0;
        /* width: 100%; */
        background:#eee;
        border-radius:8px;
        padding:4px 8px;
    }
    blockquote p{
        padding:0;
        margin:0;
        color:#ad1457;
        font-family:monospace;
    }
    blockquote strong{
        color:#00695c;
        font-family:JetBrains;
    }
    blockquote em{
        color:#ef6c00;
        font-style:normal;
        font-family:Helvetica;
    }
    @media (max-width: 800px) {
        blockquote { width: 100%; }
    }
</style>