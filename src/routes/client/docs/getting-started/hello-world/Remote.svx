
# Hello Wrold

## The external API

For instance, let's say your API provides these parameters as data processing capabilities.

````bash
https://api.mysite.com/users?
    limit=10            # rows per page
    &offset=20          # offset (20 = page number 3)
    &q=michel           # full text search
    &city=limoge        # column filter: where "city" = 'limoge'
    &sort=age
    &order=desc         # order by "age" descending
````


## Reload function

This lib is API agnostic. You will have to craft your own wrapper function that fits with specific URL query strings.

````ts
import type { State } from '@vincjo/datatables/remote'

export const myLoadFunction = async (state: State) => {
    const response = await fetch(
        `https://api.mysite.com/users?${getParams(state)}`
    )
    const json = await response.json()
    state.setTotalRows(json.count)
    return json.rows
}

const getParams = ({ offset, rowsPerPage, search, sort, filters }: State) => {
    let params = `offset=${offset}&limit=${rowsPerPage}`
    if (search) params += `&q=${search}`
    if (sort)   params += `&sort=${sort.field}&order=${sort.direction}`
    if (filters) {
        params += filters.map(({ field, value }) => `&${field}=${value}`).join()
    }
    return params
}
````


## Bind your load function to the DataHandler

At the DataHandler instanciation, you must declare your load function using "`onChange`" method.

````svelte
<script lang="ts">
    import { type State, DataHandler } from '@vincjo/datatables/remote'
    import { myLoadFunction } from './my-api-helper'

    const handler = new DataHandler([], { rowsPerPage: 10 })

    handler.onChange( (state: State) => myLoadFunction(state): Promise<Row[]> )
</script>

````

## State (= client-side datatable state)

The client-side state given to your load function allows you to translate params to specific URL query strings.

````ts
type State = {
    currentPage: number,
    rowsPerPage: number,
    offset: number,
    search: string | undefined,
    sort: Order<Row> | undefined,
    filters: Filter<Row>[] | undefined,
    setTotalRows: (value: number) => void
}
````

## Trigger reload

"`invalidate()`" method runs your load function and updates your data according to client-side interactions.

````ts
handler.invalidate() 
````