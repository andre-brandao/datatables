<script>
    import Anchor from '$site/components/Anchor.svelte'
    import Type from '$site/components/TypePopup.svelte'
</script>


# DataHandler Methods

<Anchor name="get-rows">

## Get rows

> **getRows()**: `Readable<Row[]>`

````svelte
<script lang="ts">
    import { DataHandler } from '@vincjo/datatables'
    import { someData } from './my-data.json'

    const handler = new DataHandler(someData, { rowsPerPage: 50 })

    const rows = handler.getRows()
</script>

<ul>
    {#each $rows as row}
        <li>{row.first_name} {row.last_name}</li>
    {/each}
</ul>
````
</Anchor>




<Anchor name="set-rows">

## Set rows

> **setRows(** *data*: Row[] **)**: void

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'

    export let data
    export let handler: DataHandler

    $: data, handler.setRows(data)
</script>
````
</Anchor>




<Anchor name="sort">

## Sort data

> **sort(** *orderBy*: Field`<Row>` **)**: void <br>
> **sortAsc(** *orderBy*: Field`<Row>` **)**: void <br>
> **sortDesc(** *orderBy*: Field`<Row>` **)**: void <br>
> **getSort()**: Writable`<{` *identifier*?: string, *direction*?: 'asc' | 'desc' `}>`  <br>
> **applySort(** *params*?: `{` *orderBy*?: Field`<Row>`, *direction*?: 'asc' | 'desc' `}` **)**: void <br>
> **clearSort()**: void <br>

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const sort = handler.getSort()
</script>

<button type="button"
    on:click={() => handler.sort('email')}
    class:active={$sort.identifier === 'email'}
    class:asc={$sort.direction === 'asc'}
    class:desc={$sort.direction === 'desc'}
>
    Sort by email
</button>

<button type="button"
    on:click={() => handler.sort( row => row.first_name + row.last_name)}
    class:active={$sort.identifier === 'row => row.first_name + row.last_name'}
    class:asc={$sort.direction === 'asc'}
    class:desc={$sort.direction === 'desc'}
>
    Sort by first_name + last_name
</button>
````
</Anchor>



<Anchor name="filter">

## Filter data

> **filter(** *value*: string, *filterBy*: Field`<Row>`, *comparator*?: Comparator`<Row>` **)**: void <br>
> **clearFilters()**: void <br>
> **getFilterCount()**: void <br>

````svelte
<script lang="ts">
    import { type DataHandler, check } from '@vincjo/datatables'
    export let handler: DataHandler
    
    let value1 = ''
    let value2 = ''

    const clear = () => {
        handler.clearFilters()
    }
    handler.on('clearFilters', () => {
        value1 = ''
        value2 = ''
    })
</script>

<button on:click={clear}>Clear</button>

<input type="text" 
    bind:value1 
    on:input={() => handler.filter(value1, 'email', check.endsWith)}
/>

<input type="text" 
    bind:value2 
    on:input={() => handler.filter(value2, (row) => row.first_name + row.last_name)}
/>
````
</Anchor>



<Anchor name="search">

## Search

> **search(** *value*: string, *scope*?: Field`<Row>`[] **)**: void <br>
> **clearSearch()**: void <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    let value = ''

    handler.on('clearSearch', () => value = '')
</script>

<input type="text"
    bind:value={value} 
    on:input={() => handler.search(value, ['name', 'email'])}
/>
<button type="button" on:click={() => handler.clearSearch()}>
    Clear
</button>
````
</Anchor>



<Anchor name="rows-per-page">

## Rows per page

> **getRowsPerPage()**: Writable`<number | null>`

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const rowsPerPage = handler.getRowsPerPage()
</script>

<p>Show {$rowsPerPage} entries</p>
````
</Anchor>



<Anchor name="row-count">

## Row count

> **getRowCount()**: Readable`<{` *total*: number, *start*: number, *end*: number `}>`

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const rowCount = handler.getRowCount()
</script>

<p>
    Showing <b>{$rowCount.start}</b> 
    to <b>{$rowCount.end}</b> 
    of <b>{$rowCount.total}</b> entries
</p>
````
</Anchor>



<Anchor name="pagination">

## Pagination

> **getPages(** *param*?: `{` *ellipsis*: boolean `}` **)**: Readable`<number[]>` <br>
> **getPageCount()**: Readable`<number>` <br>
> **getPageNumber()**: Readable`<number>` <br>
> **setPage(** *value*: number | 'previous' | 'next' **)**: void <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    const pageNumber = handler.getPageNumber()
    const pageCount  = handler.getPageCount()
</script>

<button type="button" on:click={() => handler.setPage(1)}>
    First page
</button>

<button type="button" on:click={() => handler.setPage('previous')}>
    Previous
</button>

<p>Page {$pageNumber} / {$pageCount}</p>

<button on:click={() => handler.setPage('next')}>
    Next
</button>

<button on:click={() => handler.setPage($pageCount)}>
    Last page
</button>
````
</Anchor>



<Anchor name="row-selection">

## Row selection

> **select(** *value*: Row | Row[keyof Row] **)**: void <br>
> **getSelected()**: Writable`<Row[] | Row[keyof Row][]>` <br>
> **selectAll(** *params*: `{` *selectBy*?: keyof Row, *scope*?: 'all' | 'currentPage'`}` **)**: void <br>
> **isAllSelected()**: Readable`<boolean>` <br>


````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler

    const rows = handler.getRows()
    const selected = handler.getSelected()
    const isAllSelected = handler.isAllSelected()
</script>

<input type="checkbox" 
    on:click={() => handler.selectAll({ selectBy: 'id' })}
    checked={$isAllSelected}
/>

{#each $rows as row}
    <tr class:active={$selected.includes(row.id)}>
        <td>
            <input type="checkbox" 
                on:click={() => handler.select(row.id)} 
                checked={$selected.includes(row.id)}
            />
        </td>
        <td>{@html row.first_name}</td>
        <td>{@html row.email}</td>
    </tr>
{/each}
````
</Anchor>



<Anchor name="event">

## Event

> **on(** *event*: 'change' | 'clearFilters' | 'clearSearch', *callback*: `() => void` **)**: void

````svelte
<script lang="ts">
    import type { DataHandler } from '@vincjo/datatables'
    export let handler: DataHandler
    let element: HTMLElement

    handler.on('change', () => {
        element.scrollTop = 0
    })
</script>

<ul bind:this={element}>

</ul>
````
</Anchor>







<style>
    h1{
        font-size:48px;
        color:var(--primary);
        font-weight:normal;
    }
    h2{
        font-size:48px;
        color:var(--secondary);
        font-weight:400;
        margin:80px 0 8px 0;
    }
    p{
        margin-right:24px;
    }
    blockquote{
        position:relative;
        overflow: auto;
        white-space: nowrap;
        display:inline-block;
        margin:0;
        /* width: 100%; */
        background:#eee;
        border-radius:8px;
        padding:4px 8px;
    }
    blockquote p{
        padding:0;
        margin:0;
        color:#ad1457;
        font-family:monospace;
    }
    blockquote strong{
        color:#00695c;
        font-family:JetBrains;
    }
    blockquote em{
        color:#ef6c00;
        font-style:normal;
        font-family:Helvetica;
    }
    @media (max-width: 800px) { 
        blockquote { width: 100%; }
    }
</style>